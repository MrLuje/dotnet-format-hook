<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <GitCmd>git</GitCmd>
    <IsCi Condition="'$(CI)' != ''">$(CI)</IsCi>
    <IsCi Condition="'$(CI)' == ''">false</IsCi>
  </PropertyGroup>

  <Target Name="_GitRoot" Condition="!$(IsCi)">
    <Exec Command='$(GitCmd) rev-parse --show-toplevel' ConsoleToMSBuild='true' ContinueOnError='true'>
      <Output TaskParameter="ConsoleOutput" PropertyName="_GitOutput" />
      <Output TaskParameter="ExitCode" PropertyName="MSBuildLastExitCode" />
    </Exec>

    <Exec Command="echo value is gitroot $(_GitOutput)" ConsoleToMSBuild='true' />

    <PropertyGroup Condition="'$(MSBuildLastExitCode)' == '0'">
      <GitRoot>$([MsBuild]::NormalizeDirectory($(_GitOutput.Trim())))</GitRoot>
    </PropertyGroup>
    <Error Condition="'$(MSBuildLastExitCode)' != '0'" Text="Git is not installed ?" />
  </Target>

  <Target Name="EmitGitHooksCreateVariables" DependsOnTargets="_GitRoot" BeforeTargets="Compile" Condition="!($(IsCi))">
    <!-- Create variable to file .git\format-hook.enabled -->
    <PropertyGroup>
      <GitRoot>$([MsBuild]::NormalizeDirectory($(_GitOutput.Trim())))</GitRoot>
    </PropertyGroup>
    <CombinePath BasePath="$(GitRoot).git" Paths="format-hook.enabled">
      <Output TaskParameter="CombinedPaths" PropertyName="GitHookStatusFile" />
    </CombinePath>
    <CombinePath BasePath="$(GitRoot)" Paths="$(HooksPath)">
      <Output TaskParameter="CombinedPaths" PropertyName="HooksFolder" />
    </CombinePath>
    <CombinePath BasePath="$(HooksFolder)" Paths="pre-commit">
      <Output TaskParameter="CombinedPaths" PropertyName="PrecommitFile" />
    </CombinePath>
    <CombinePath BasePath="$(GitRoot).config" Paths="dotnet-tools.json">
      <Output TaskParameter="CombinedPaths" PropertyName="ToolManifestPath" />
    </CombinePath>
  </Target>

  <Target Name="SetupHooks" AfterTargets="EmitGitHooksCreateVariables" Condition="!Exists($(GitHookStatusFile)) And !($(IsCi))">
    <Exec Command="dotnet format --version" WorkingDirectory="$(GitRoot)" ConsoleToMsBuild="true" StandardErrorImportance="Low" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="MSBuildLastExitCode" />
    </Exec>

    <PropertyGroup>
      <DotnetFormatInstalled Condition="'$(MSBuildLastExitCode)' == '0'">true</DotnetFormatInstalled>
      <DotnetFormatInstalled Condition="'$(MSBuildLastExitCode)' != '0'">false</DotnetFormatInstalled>
    </PropertyGroup>

    <Exec Command="dotnet new tool-manifest" WorkingDirectory="$(GitRoot)" ConsoleToMsBuild="true" Condition="!$(DotnetFormatInstalled)">
      <Output TaskParameter="ExitCode" PropertyName="MSBuildLastExitCode" />
    </Exec>
    <Exec Command="dotnet tool install dotnet-format" WorkingDirectory="$(GitRoot)" ConsoleToMsBuild="true" Condition="!$(DotnetFormatInstalled) AND '$(MSBuildLastExitCode)' == '0'" />
    <Error Condition="'$(MSBuildLastExitCode)' != '0'" Text="dotnet-format is not installed and can't be installed" />

    <Exec Command="dotnet format --version" WorkingDirectory="$(GitRoot)" ConsoleToMsBuild="true" StandardErrorImportance="Low" ContinueOnError="true" Condition="!$(DotnetFormatInstalled) AND '$(MSBuildLastExitCode)' == '0'">
      <Output TaskParameter="ExitCode" PropertyName="MSBuildLastExitCode" />
    </Exec>

    <Exec Command="git config core.hooksPath $(HooksPath)" ConsoleToMsBuild="true" Condition="'$(MSBuildLastExitCode)' == '0'">
      <Output TaskParameter="ExitCode" PropertyName="MSBuildLastExitCode" />
    </Exec>
    <Error Condition="'$(MSBuildLastExitCode)' != '0'" Text="Hooks configuration with git failed" />

    <MakeDir Directories="$(HooksFolder)" Condition="!Exists($(HooksFolder))" />
    <WriteLinesToFile File="$(PrecommitFile)" Lines="$(PreCommitContent)" />
    <!-- <WriteLinesToFile File="$(PrecommitFile)" Lines="$(PreCommitContentUnix)" Condition="!Exists($(PrecommitFile)) AND '$(OS)' != 'Windows_NT'" /> -->
    <Exec Command="
        chmod +x $(PrecommitFile)
        sed -i 's/\r$//' $(PrecommitFile)"
      ConsoleToMsBuild="true" Condition="Exists($(PrecommitFile)) AND '$(OS)' != 'Windows_NT'" />

    <!-- Create the file if it doesn't exists -->
    <WriteLinesToFile File="$(GitHookStatusFile)" Condition="!Exists($(GitHookStatusFile))" />
  </Target>
</Project>